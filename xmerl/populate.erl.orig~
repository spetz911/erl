-module(populate).
-export([run/1]).

run(FileName) ->
    {ok, {Quotes, _}, _} = xmerl_sax_parser:file(
			     FileName, 
			     [{event_fun, fun event/3},
			      {event_state, {[], ""}}]),
	[_,A|_] = Quotes,
    lists:reverse(A).

%% For the end field event, use the last set of characters 
%% encountered as the value for that field
-define(QUOTE_VALUE(Title),
	event(_Event = {endElement, _, Title, _}, 
	      _Location,
	      _State = {[Quote|Rest], Chars}) ->
	       Updated = [{Title, Chars}|Quote],
	       {[Updated|Rest], undefined}).


%% Start "FutureQuote" creates a new, empty key-value list
%% for the quote
event(_Event = {startElement, _, "FutureQuote", _, _}, 
      _Location, 
      _State = {Quotes, _}) ->
    {[[]|Quotes], ""};

%% Characters are stores in the parser state
event(_Event = {characters, Chars}, 
      _Location, 
      _State = {Quotes, _}) ->
    {Quotes, Chars};

?QUOTE_VALUE("Date");
?QUOTE_VALUE("Open");
?QUOTE_VALUE("High");
?QUOTE_VALUE("Low");
?QUOTE_VALUE("Last");

%% Catch-all. Pass state on as-is    
event(_Event, _Location, State) ->
    State.

DATA TYPES

option()
Options used to customize the behaviour of the parser.
Possible options are:
	{event_fun, EventFun}
	EventFun is the call back function for parser events.
	{event_state, term()}
	State that is accessible in the event call back function.
	%% доступный accessible
	
	
	
	
	


