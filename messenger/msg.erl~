%%% Утилита обмена сообщениями.  

%%% Интерфейс пользователя:
%%% logon(Name)
%%%   Одновременно войти в систему на одном Erlang-узле может только один 
%%%   пользователь, указав соответствующее имя (Name). Если имя уже 
%%%   используется на другом узле, или если кто-то уже вошел в систему на 
%%%   этом узле, во входе будет отказано с соответствующим 
%%%   сообщением об ошибке.
%%% logoff()
%%%   Выход пользователя из системы
%%% message(ToName, Message)
%%%   Отправляет Message ToName. Сообщения об ошибках выдаются, если
%%%   пользователь или получатель (ToName) не вошел в систему.
%%%

%%% Один узел в сети Erlang-узлов исполняет сервер, который поддерживает 
%%% данные о пользователях, вошедших в систему. Сервер зарегистрирован как 
%%% "messenger".
%%% Каждый узел, где имеется вошедший в систему пользователь, исполняет 
%%% клиентский процесс, зарегистрированный как "mess_client".
%%%
%%% Протокол между клиентскими процессами и сервером
%%% ----------------------------------------------------
%%% 
%%% Серверу: {ClientPid, logon, UserName}
%%% Ответ {messenger, stop, user_exists_at_other_node} останавливает клиента
%%% Ответ {messenger, logged_on} вход в систему удачен
%%%
%%% Серверу: {ClientPid, logoff}
%%% Ответ: {messenger, logged_off}
%%%
%%% Серверу: {ClientPid, logoff}
%%% Ответ: no reply
%%%
%%% Серверу: {ClientPid, message_to, ToName, Message} послать сообщение
%%% Ответ: {messenger, stop, you_are_not_logged_on} останавливает клиента
%%% Ответ: {messenger, receiver_not_found} нет зарегистрированного 
%%%        пользователя с таким именем
%%% Ответ: {messenger, sent} Сообщение отправлено (без гарантий)
%%%
%%% Клиенту: {message_from, Name, Message}, 
%%%
%%% Протокол между "командами" и клиентом
%%% ----------------------------------------------
%%%
%%% Запущено: messenger:client(Server_Node, Name)
%%% Клиенту: logoff
%%% Клиенту: {message_to, ToName, Message}
%%%

%%% Конфигурирование: изменяет функцию server_node(), чтобы она возвращала имя
%%% узла, где запущен сервер

-module(messenger).
-export([start_server/0, server/1, logon/1, logoff/0, message/2, client/2]).

%%% Измените функцию server_node(), чтобы она возвращала имя узла, 
%%% где запущен сервер

server_node() ->
  messenger@bill.

%%% Это серверный процесс для "messenger"
%%% Формат списка пользователей: 
%%%   [{ClientPid1, Name1}, {ClientPid22, Name2}, ...]

server(User_List) ->
  receive
    {From, logon, Name} ->
      New_User_List = server_logon(From, Name, User_List), 
      server(New_User_List);
    {From, logoff} ->
      New_User_List = server_logoff(From, User_List), 
      server(New_User_List);
    {From, message_to, To, Message} ->
      server_transfer(From, To, Message, User_List), 
      io:format("list is now: ~p~n", [User_List]), 
      server(User_List)
  end.

%%% запуск сервера

start_server() ->
  register(messenger, spawn(messenger, server, [[]])).

%%% Сервер добавляет нового пользователя в списке пользователей.
server_logon(From, Name, User_List) ->
  %% проверка, не производился ли логон в другом месте
  case lists:keymember(Name, 2, User_List) of
    true ->
      From ! {messenger, stop, user_exists_at_other_node}, % запрет логона
      User_List;
    false ->
      From ! {messenger, logged_on}, 
      [{From, Name} | User_List]  % добавление пользователя в список
  end.

%%% Сервер удаляет пользователя из списка
server_logoff(From, User_List) ->
  lists:keydelete(From, 1, User_List).
%%% Сервер передает сообщения пользователей

server_transfer(From, To, Message, User_List) ->
  %% Проверка реквизитов пользователя
  case lists:keysearch(From, 1, User_List) of
    false ->
      From ! {messenger, stop, you_are_not_logged_on};
    {value, {From, Name}} ->
      server_transfer(From, Name, To, Message, User_List)
  end.

%%% Если пользователь существует, передать сообщение

server_transfer(From, Name, To, Message, User_List) ->
  %% Поиск получателя и отправка сообщения
  case lists:keysearch(To, 2, User_List) of
    false ->
      From ! {messenger, receiver_not_found};
    {value, {ToPid, To}} ->
      ToPid ! {message_from, Name, Message}, 
      From ! {messenger, sent} 
  end.


%%% Пользовательские команды

logon(Name) ->
  case whereis(mess_client) of 
    undefined ->
      register(mess_client, 
           spawn(messenger, client, [server_node(), Name]));
    _ -> already_logged_on
  end.

logoff() ->
  mess_client ! logoff.

message(ToName, Message) ->
  case whereis(mess_client) of % Тест работы клиента
    undefined ->
      not_logged_on;
    _ -> mess_client ! {message_to, ToName, Message}, 
       ok
end.

%%% Клиентский процесс, исполняемый на каждом серверном узле

client(Server_Node, Name) ->
  {messenger, Server_Node} ! {self(), logon, Name}, 
  await_result(), 
  client(Server_Node).

client(Server_Node) ->
  receive
    logoff ->
      {messenger, Server_Node} ! {self(), logoff}, 
      exit(normal);
    {message_to, ToName, Message} ->
      {messenger, Server_Node} ! {self(), message_to, ToName, Message}, 
      await_result();
    {message_from, FromName, Message} ->
      io:format("Message from ~p: ~p~n", [FromName, Message])
  end, 
  client(Server_Node).

%%% Ожидание ответа сервера
await_result() ->
  receive
    {messenger, stop, Why} -> % Остановка клиента
      io:format("~p~n", [Why]), 
      exit(normal);
    {messenger, What} ->  % Нормальный ответ
      io:format("~p~n", [What])
  end.

